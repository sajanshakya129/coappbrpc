// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sum.proto

#include "sum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace pbrpc {
namespace api {
class AddRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddRequest> _instance;
} _AddRequest_default_instance_;
class AddResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddResponse> _instance;
} _AddResponse_default_instance_;
}  // namespace api
}  // namespace pbrpc
static void InitDefaultsAddRequest_sum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbrpc::api::_AddRequest_default_instance_;
    new (ptr) ::pbrpc::api::AddRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbrpc::api::AddRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddRequest_sum_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddRequest_sum_2eproto}, {}};

static void InitDefaultsAddResponse_sum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbrpc::api::_AddResponse_default_instance_;
    new (ptr) ::pbrpc::api::AddResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbrpc::api::AddResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddResponse_sum_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddResponse_sum_2eproto}, {}};

void InitDefaults_sum_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_AddRequest_sum_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddResponse_sum_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_sum_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_sum_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_sum_2eproto[1];

const ::google::protobuf::uint32 TableStruct_sum_2eproto::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbrpc::api::AddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbrpc::api::AddRequest, operand1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbrpc::api::AddRequest, operand2_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbrpc::api::AddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbrpc::api::AddResponse, result_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pbrpc::api::AddRequest)},
  { 7, -1, sizeof(::pbrpc::api::AddResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbrpc::api::_AddRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbrpc::api::_AddResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_sum_2eproto = {
  {}, AddDescriptors_sum_2eproto, "sum.proto", schemas,
  file_default_instances, TableStruct_sum_2eproto::offsets,
  file_level_metadata_sum_2eproto, 2, file_level_enum_descriptors_sum_2eproto, file_level_service_descriptors_sum_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_sum_2eproto = {
  false, InitDefaults_sum_2eproto, 
  "\n\tsum.proto\022\tpbrpc.api\"0\n\nAddRequest\022\020\n\010"
  "operand1\030\001 \001(\005\022\020\n\010operand2\030\002 \001(\005\"\035\n\013AddR"
  "esponse\022\016\n\006result\030\001 \001(\0052B\n\nSumService\0224\n"
  "\003Add\022\025.pbrpc.api.AddRequest\032\026.pbrpc.api."
  "AddResponseB\003\200\001\001b\006proto3"
,
  "sum.proto", &assign_descriptors_table_sum_2eproto, 184,
};

void AddDescriptors_sum_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_sum_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sum_2eproto = []() { AddDescriptors_sum_2eproto(); return true; }();
namespace pbrpc {
namespace api {

// ===================================================================

void AddRequest::InitAsDefaultInstance() {
}
class AddRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddRequest::kOperand1FieldNumber;
const int AddRequest::kOperand2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRequest::AddRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrpc.api.AddRequest)
}
AddRequest::AddRequest(const AddRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&operand1_, &from.operand1_,
    static_cast<size_t>(reinterpret_cast<char*>(&operand2_) -
    reinterpret_cast<char*>(&operand1_)) + sizeof(operand2_));
  // @@protoc_insertion_point(copy_constructor:pbrpc.api.AddRequest)
}

void AddRequest::SharedCtor() {
  ::memset(&operand1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operand2_) -
      reinterpret_cast<char*>(&operand1_)) + sizeof(operand2_));
}

AddRequest::~AddRequest() {
  // @@protoc_insertion_point(destructor:pbrpc.api.AddRequest)
  SharedDtor();
}

void AddRequest::SharedDtor() {
}

void AddRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddRequest& AddRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AddRequest_sum_2eproto.base);
  return *internal_default_instance();
}


void AddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrpc.api.AddRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&operand1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operand2_) -
      reinterpret_cast<char*>(&operand1_)) + sizeof(operand2_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AddRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int32 operand1 = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_operand1(value);
        break;
      }
      // int32 operand2 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_operand2(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrpc.api.AddRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 operand1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operand1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 operand2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operand2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrpc.api.AddRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrpc.api.AddRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrpc.api.AddRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 operand1 = 1;
  if (this->operand1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operand1(), output);
  }

  // int32 operand2 = 2;
  if (this->operand2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operand2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbrpc.api.AddRequest)
}

::google::protobuf::uint8* AddRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbrpc.api.AddRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 operand1 = 1;
  if (this->operand1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operand1(), target);
  }

  // int32 operand2 = 2;
  if (this->operand2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operand2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbrpc.api.AddRequest)
  return target;
}

size_t AddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrpc.api.AddRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 operand1 = 1;
  if (this->operand1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->operand1());
  }

  // int32 operand2 = 2;
  if (this->operand2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->operand2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrpc.api.AddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AddRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrpc.api.AddRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrpc.api.AddRequest)
    MergeFrom(*source);
  }
}

void AddRequest::MergeFrom(const AddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrpc.api.AddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operand1() != 0) {
    set_operand1(from.operand1());
  }
  if (from.operand2() != 0) {
    set_operand2(from.operand2());
  }
}

void AddRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrpc.api.AddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRequest::CopyFrom(const AddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrpc.api.AddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRequest::IsInitialized() const {
  return true;
}

void AddRequest::Swap(AddRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRequest::InternalSwap(AddRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(operand1_, other->operand1_);
  swap(operand2_, other->operand2_);
}

::google::protobuf::Metadata AddRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sum_2eproto);
  return ::file_level_metadata_sum_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AddResponse::InitAsDefaultInstance() {
}
class AddResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddResponse::AddResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrpc.api.AddResponse)
}
AddResponse::AddResponse(const AddResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:pbrpc.api.AddResponse)
}

void AddResponse::SharedCtor() {
  result_ = 0;
}

AddResponse::~AddResponse() {
  // @@protoc_insertion_point(destructor:pbrpc.api.AddResponse)
  SharedDtor();
}

void AddResponse::SharedDtor() {
}

void AddResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddResponse& AddResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AddResponse_sum_2eproto.base);
  return *internal_default_instance();
}


void AddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrpc.api.AddResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AddResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_result(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrpc.api.AddResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrpc.api.AddResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrpc.api.AddResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrpc.api.AddResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbrpc.api.AddResponse)
}

::google::protobuf::uint8* AddResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbrpc.api.AddResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbrpc.api.AddResponse)
  return target;
}

size_t AddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrpc.api.AddResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrpc.api.AddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AddResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrpc.api.AddResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrpc.api.AddResponse)
    MergeFrom(*source);
  }
}

void AddResponse::MergeFrom(const AddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrpc.api.AddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void AddResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrpc.api.AddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddResponse::CopyFrom(const AddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrpc.api.AddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddResponse::IsInitialized() const {
  return true;
}

void AddResponse::Swap(AddResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddResponse::InternalSwap(AddResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata AddResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_sum_2eproto);
  return ::file_level_metadata_sum_2eproto[kIndexInFileMessages];
}


// ===================================================================

SumService::~SumService() {}

const ::google::protobuf::ServiceDescriptor* SumService::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_sum_2eproto);
  return file_level_service_descriptors_sum_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* SumService::GetDescriptor() {
  return descriptor();
}

void SumService::Add(::google::protobuf::RpcController* controller,
                         const ::pbrpc::api::AddRequest*,
                         ::pbrpc::api::AddResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Add() not implemented.");
  done->Run();
}

void SumService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_sum_2eproto[0]);
  switch(method->index()) {
    case 0:
      Add(controller,
             ::google::protobuf::down_cast<const ::pbrpc::api::AddRequest*>(request),
             ::google::protobuf::down_cast< ::pbrpc::api::AddResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SumService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::pbrpc::api::AddRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& SumService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::pbrpc::api::AddResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SumService_Stub::SumService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SumService_Stub::SumService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SumService_Stub::~SumService_Stub() {
  if (owns_channel_) delete channel_;
}

void SumService_Stub::Add(::google::protobuf::RpcController* controller,
                              const ::pbrpc::api::AddRequest* request,
                              ::pbrpc::api::AddResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace pbrpc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pbrpc::api::AddRequest* Arena::CreateMaybeMessage< ::pbrpc::api::AddRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pbrpc::api::AddRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pbrpc::api::AddResponse* Arena::CreateMaybeMessage< ::pbrpc::api::AddResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pbrpc::api::AddResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
